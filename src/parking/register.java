package parking;
import java.util.*;
import java.util.Map.Entry;
import java.io.*;
import java.awt.Event;
import java.awt.*;
import javax.swing.JOptionPane;
public class register extends javax.swing.JFrame 
{
        boolean flag=true;
	long arr_in[]=new long[10];
	long arr_out[]=new long[10];
	long arr_total[]=new long[10];
        String rno;
    
        HashMap<Integer, String> a=new HashMap<Integer,String>();
        
    public register() 
    {
        for(int i=0;i<100;i++)
        {
            a.put(i, null);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        regno = new javax.swing.JTextField();
        available = new javax.swing.JButton();
        park = new javax.swing.JButton();
        status = new javax.swing.JButton();
        remve = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Registration Number: ");

        regno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regnoActionPerformed(evt);
            }
        });

        available.setText("Check Availability");
        available.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableActionPerformed(evt);
            }
        });

        park.setText("Park Vehicle");
        park.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parkActionPerformed(evt);
            }
        });

        status.setText("Check Status");
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });

        remve.setText("Check out");
        remve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(status)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remve))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(available)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(park))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(regno, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(regno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(available)
                    .addComponent(park))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status)
                    .addComponent(remve))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regnoActionPerformed

    private void availableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableActionPerformed
    for(int i=0;i<10;i++)
	
        rno=regno.getText();
    Set set2=a.entrySet();
    Iterator it2=set2.iterator();
    int count=0;
	try
	{
		while(it2.hasNext())
		{
			Map.Entry e2=(Entry) it2.next();
			if(e2.getValue()==null)
			{
        		     count++;
                             
			}
		}
                JOptionPane.showMessageDialog(rootPane,"Total Available Slots are: "+count);
	}
	catch(Exception e)
	{
		System.out.println(e);
	}
// TODO add your handling code here:
    }//GEN-LAST:event_availableActionPerformed

    private void parkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parkActionPerformed
        Set set=a.entrySet();
		Iterator it=set.iterator();
		while(it.hasNext())
		{
			Map.Entry e=(Entry) it.next();
			if(e.getValue()==null)
			{
				
				a.put((Integer)e.getKey(),rno);
				long startTime = System.currentTimeMillis();
				arr_in[(Integer)e.getKey()]=startTime;
                                JOptionPane.showMessageDialog(rootPane, "Vehicle parked");
				break;
			}
		}    }//GEN-LAST:event_parkActionPerformed

    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        Set set1=a.entrySet();
		Iterator it1=set1.iterator();
		while(it1.hasNext())
		{
			Map.Entry e1=(Entry) it1.next();
			if(rno.equals(e1.getValue()))
                        {
				JOptionPane.showMessageDialog(rootPane, "the vehicle is parked at "+e1.getKey());
			}
		}
        // TODO add your handling code here:
    }//GEN-LAST:event_statusActionPerformed

    private void remveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remveActionPerformed
           
        Set set4=a.entrySet();
		Iterator it4=set4.iterator();
	try
	{
		while(it4.hasNext())
		{
			Map.Entry e4=(Entry) it4.next();
                        if(rno.equals(e4.getValue()))
			{
				long stopTime = System.currentTimeMillis();
				arr_out[(Integer)e4.getKey()]=stopTime;	
				arr_total[(Integer)e4.getKey()]=arr_out[(Integer)e4.getKey()]-arr_in[(Integer)e4.getKey()];
				//System.out.println(arr_total[(Integer)e4.getKey()]);
				float minutes=(float) Math.ceil(arr_total[(Integer)e4.getKey()]/60000);
			        JOptionPane.showMessageDialog(rootPane,"Vehicle is parked for "+minutes+" mins");
				float charge=minutes*(float)1.0;
				a.put((Integer)e4.getKey(), null);
				JOptionPane.showMessageDialog(rootPane,"Your Charge is Rs."+charge);
				break;
			}
		}
	}
		catch(Exception e)
			{
				System.out.println(e);
			}        // TODO add your handling code here:
    }//GEN-LAST:event_remveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
	
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton available;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton park;
    private javax.swing.JTextField regno;
    private javax.swing.JButton remve;
    private javax.swing.JButton status;
    // End of variables declaration//GEN-END:variables
}
